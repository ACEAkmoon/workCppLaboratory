//В языке Си/Си++ в Visual Studio можно использовать предварительно откомпилированные заголовки (precompiled headers) для ускорения компиляции. 
//Один из заголовочных файлов включает в себя другие заголовочные файлы, часто используемые в проекте и при этом редко подвергающиеся правкам. 
//Этот файл чаще всего имеет имя StdAfx.h.
#include "stdafx.h" //Для работы с VS12 C++11

//*старые библиотеки <iostream.h> or <iomanip.h> больше не поддерживают, 
//*вместо них нужно использовать только новые: #include <iostream> or <iomanip>

//заголовочный файл с классами, функциями и переменными для организации ввода-вывода в языке программирования C++.
#include  <iostream>
//#include <stdio.h> //заголовочный файл с классами, функциями и переменными для организации ввода-вывода в языке программирования Cи.

//Для использования setw(), setfill(' ') и setprecision() задают ширину отображения поля 
//для следующего элемента в потоке вывода данных, подключается библиотека  iomanip.h.
#include  <iomanip>

#include <cstdlib>  //Для работы с функцией system("pause")
using namespace std; //пространство имен - Используется для того, чтобы ограничить видимость переменных, функций и т.п.

int m, step = 1;
float km = 0;

void ft_out_list(int step)
{
	//цикл: 
	//присваиваем типу m-(метры) значение 100, 
	//продолжаем повторять цикл пока не достигнем значения 1000,
	//шагаем согласно введеного значения step
	for (m = 100; m <= 1000; m += step)
	{
		km = (float)m / 1000; //явное преобразование типа int в float для записи дробного остатка
		cout << setw(5) << m << "m" << " = " << setprecision(3) << km << "km"<< endl;
	}
}

void ft_out_table(int step)
{
	cout << setw(24) << "***********************" << endl;
	cout << setw(24) << "* Meters * Kilometers *" << endl;
	cout << setw(24) << "***********************" << endl;

	//цикл: согласно описания цикла в ft_out_list
	for (m = 100; m <= 1000; m += step)
	{
		km = (float)m / 1000; //явное преобразование типа int в float для записи дробного остатка
		cout << " *" << setw(5) << m << "   *   " << setprecision(3) << km << setw(6) << "*" << endl;
	}
	cout << setw(24) << "***********************" << endl;
}

int  main() //(int argc, char* argv[])
{
	int view = 0;

	cout << "Enter (1): list display\nEnter (2): table display" << endl;
	cin >> view; //записиваем значение варианта отображения
	if (view < 1 || view > 2) //если введено иное значение выбора, програма завершаеться
	{
		cout << "ERROR: incorrect value" << endl;
		system ("pause");
		return (0);
	}
	cout << "Enter output step" << endl;
	cin >> step; //записиваем значение шага

	//виводим на екран результат согласно выбраного вида отображения
	if (view == 1)
	{
		ft_out_list(step); //обращаемся в функция для отображения листом с передачей значения шага
	} 
	else if (view == 2)
	{
		ft_out_table(step); //обращаемся в функция для отображения таблицей с передачей значения шага
	}
	//cin.get(); //ожидание ввода в консоль
	system ("pause"); //ожидание нажатия клавишы для окончания работы
	return (0); //если функция определена не void нужно возвращать значение NULL
}
